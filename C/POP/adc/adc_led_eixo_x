#include <msp430.h> 

#define TRUE    1
#define FALSE   0
#define ABERTA 1 //Chave aberta
#define FECHADA 0
#define DBC 1000

void debounce(int valor);
int mon_s3(void);
void io_config();

void adc_config();
void adc_converte();

volatile unsigned int media_a0=0;
volatile char dir;

int main(void){

    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    io_config();                //Leds e chave no 6.2
    adc_config();               // Configura o ADC

    while(TRUE) {

        adc_converte();
        sel_dir();

        if (mon_s3() == TRUE) {
            P1OUT &= ~BIT0;
            P4OUT &= ~BIT7;
        }

        }

    return 0;
}

char joy_dir (void) {
    if (media_a0 > 2950){           // Direita
            dir = 'D';
    }
    else if (media_a0 < 1100){      // Esquerda
        dir = 'E';
    }
    else {
        dir = 'X';
    }

    return dir;

}

void sel_dir (void) {
    if (joy_dir() == 'E') {
        P1OUT |= BIT0;
        P4OUT &= ~BIT7;
    }
    else if (joy_dir() == 'D') {
        P1OUT &= ~BIT0;
        P4OUT |= BIT7;
    }
}

// Configurar I/O
void io_config() {

    // Configura a chave SW6.2
    P6DIR &= ~BIT2;
    P6REN |= BIT2;
    P6OUT |= BIT2;

    // Configura os LEDS
    P1DIR |= BIT0;              //Led1 = P1.0 = saída
    P1OUT &= ~BIT0;             //Led1 apagado

    P4DIR |= BIT7;              //Led2 = P4.7 = saída
    P4OUT &= ~BIT7;             //Led1 apagado
}

// Debouce para precisão da chave
void debounce(int valor){
    volatile int x; //volatile evita optimizador do compilador
        for (x=0; x<valor; x++); //Apenas gasta tempo
    }

// Monitora a chave s3
int mon_s3(void){
        static int ps1=ABERTA;          //Guardar passado de S3
            if ((P6IN&BIT2) == 0){      //Qual estado atual de S3?
                if (ps1==ABERTA){       //Qual o passado de S3?
                    debounce(DBC);
                    ps1=FECHADA;
                    return TRUE;
                    }
                }
            else {
                if (ps1==FECHADA){      //Qual o passado de S3?
                    debounce(DBC);
                    ps1=ABERTA;
                    return FALSE;
                }
            }
    return FALSE;
}

//////////////////////////////////////////////////////////////////////////
//////////////////// Funções do adc ////////// ///////////////////////////
//////////////////////////////////////////////////////////////////////////

// Configuração da pinagem e registradores do ADC
void adc_config() {
        ADC12CTL0 &= ~ADC12ENC;         // Desabilita as conversões antes de configuraro módulo!

        P6SEL |= (BIT0);     // Habilita as entradas em P6.0

        ADC12CTL0 = ADC12SHT1_3 +       // Sample and hold time
                    ADC12SHT0_3 +       // Sample and hold time
                    ADC12ON     +       // Liga o ADC
                    ADC12MSC;       // Modo sequencial!
        ADC12CTL1 = ADC12CSTARTADD_0 +  // Inicio da sequencia = canal 0.
                    ADC12SHS_0 +        // Sample and holder "manual"
                    ADC12SHP +          // Sampling signal = sampling timer
                    ADC12DIV_0 +        // Divisor de clock.
                    ADC12SSEL_0 +       // Oscilador do ADC
                    ADC12CONSEQ_1;   // Sequence of channels
        ADC12CTL2 = ADC12TCOFF +        // Desliga o sensor de temperatura
                    ADC12RES_2;         // Resolução = 12 bits

        // Aproveitando os 16 canais do conversor, as 8 coletas serão feitas de uma única vez
        // ADC12SREF_0 - Vref- = GND; Vref+ = Vcc = 3.3V  - Referências de conversão

        ADC12MCTL2 = ADC12SREF_0 + ADC12INCH_0;   // Memória 2 = canal 0.
        ADC12MCTL4 = ADC12SREF_0 + ADC12INCH_0;   // Memória 4 = canal 0.
        ADC12MCTL6 = ADC12SREF_0 + ADC12INCH_0;   // Memória 6 = canal 0.
        ADC12MCTL8 = ADC12SREF_0 + ADC12INCH_0;   // Memória 8 = canal 0.
        ADC12MCTL10 = ADC12SREF_0 + ADC12INCH_0;   // Memória 10 = canal 0.
        ADC12MCTL12 = ADC12SREF_0 + ADC12INCH_0;   // Memória 12 = canal 0.
        ADC12MCTL14 = ADC12SREF_0 + ADC12INCH_0;   // Memória 14 = canal 0.
        ADC12MCTL15 = ADC12SREF_0 +                // Memória 15 = canal 1.
                    ADC12INCH_0 +
                    ADC12EOS;                    // Fim da sequência de conversão    
                    
        ADC12IFG = 0;

        ADC12CTL0 |= ADC12ENC;          // Habilita o ADC para permitir conversões!
}

// Recebe os valores da conversão, calcula a media e coloca em uma variável global
void adc_converte() {
    volatile unsigned int buffer_a0[8],i;

    ADC12CTL0 &= ~ADC12SC;
    ADC12CTL0 |= ADC12SC;

    // Espera a conversão terminar
    while(!(ADC12IFG));

    // Guarda o dado convertido
    buffer_a0[1] = ADC12MEM2;
    buffer_a0[2] = ADC12MEM4;
    buffer_a0[3] = ADC12MEM6;
    buffer_a0[4] = ADC12MEM8;
    buffer_a0[5] = ADC12MEM10;
    buffer_a0[6] = ADC12MEM12;
    buffer_a0[7] = ADC12MEM14;
    buffer_a0[0] = ADC12MEM15;    

    // Soma todos os valores das conversões
    for (i=0; i<8; i++){
        media_a0 = media_a0 + buffer_a0[i];
    }

    // Faz três rotações para a direita que é o equivalente a dividir por 8
    media_a0 = (media_a0 >> 3);
}

